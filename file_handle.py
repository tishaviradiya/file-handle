# -*- coding: utf-8 -*-
"""File_Handle.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vhpBPuYdi5CEz9cQukSDzWXxvn1ZRJbG
"""

1. What is the difference between interpreted and compiled languages?
Compiled languages: Source code is translated into machine code before execution using a compiler. Runs faster but requires recompilation after changes.
Examples: C, C++, Go.

Interpreted languages: Code is executed line-by-line by an interpreter during runtime. Easier to debug but slower.
Examples: Python, JavaScript.

2. What is exception handling in Python?
Exception handling in Python is a mechanism to handle runtime errors so that the normal flow of the program is maintained. It uses keywords like try, except, else, and finally.

3. What is the purpose of the finally block in exception handling?
The finally block is used to execute code regardless of whether an exception occurs or not. It’s often used for cleanup actions like closing files or releasing resources.

4. What is logging in Python?
Logging is a way to record program events such as errors, warnings, and debug information. It helps in debugging and monitoring applications. Implemented via Python’s built-in logging module.

5. What is the significance of the __del__ method in Python?
__del__ is a destructor method in Python. It is called automatically when an object is about to be destroyed to perform cleanup tasks like closing files or freeing resources.

6. What is the difference between import and from ... import in Python?
import module: Imports the entire module. Access functions/variables with module.name.

from module import name: Imports specific items from a module, allowing direct use without the module prefix.

7. How can you handle multiple exceptions in Python?
Use multiple except blocks for different exception types.

Or catch multiple exceptions in a single block using a tuple:
try:
    ...
except (TypeError, ValueError) as e:
    print(e)

8. What is the purpose of the with statement when handling files in Python?
The with statement ensures automatic resource management. Files are closed automatically after the block ends, even if an error occurs.

9. What is the difference between multithreading and multiprocessing?
Multithreading: Multiple threads share the same memory space; better for I/O-bound tasks.

Multiprocessing: Multiple processes have separate memory; better for CPU-bound tasks.

10. What are the advantages of using logging in a program?
Provides a record of events for debugging.

Can categorize messages by severity (DEBUG, INFO, WARNING, ERROR, CRITICAL).

Can save logs to files for later analysis.

Better than using print() for production systems.

11. What is memory management in Python?
Memory management in Python involves the allocation and deallocation of memory to objects. Python uses a private heap space and automatic garbage collection.

12. What are the basic steps involved in exception handling in Python?
Wrap risky code in a try block.

Catch exceptions in one or more except blocks.

Optionally use else for code that runs if no exception occurs.

Use finally for cleanup code.

13. Why is memory management important in Python?
It ensures:

Efficient memory usage.

Avoidance of memory leaks.

Optimal performance of programs.

14. What is the role of try and except in exception handling?
try: Contains code that might raise an exception.

except: Catches and handles exceptions raised in the try block.

15. How does Python's garbage collection system work?
Python uses reference counting and a garbage collector to free memory occupied by unused objects. When an object’s reference count drops to zero, it’s destroyed.

16. What is the purpose of the else block in exception handling?
The else block runs if no exception occurs in the try block. It keeps success code separate from error handling code.

17. What are the common logging levels in Python?
DEBUG – Detailed information for debugging.

INFO – Confirmation that things are working as expected.

WARNING – Something unexpected happened but program continues.

ERROR – Due to a serious problem, some functionality is not working.

CRITICAL – Serious error indicating the program may not continue.

18. What is the difference between os.fork() and multiprocessing in Python?
os.fork() (Unix only): Creates a new process by duplicating the current one.

multiprocessing: Cross-platform module for creating processes with easier API.

19. What is the importance of closing a file in Python?
Closing a file:

Frees up system resources.

Ensures all buffered data is written to disk.

Prevents file corruption.

20. What is the difference between file.read() and file.readline() in Python?
read(): Reads the entire file or a specified number of bytes.

readline(): Reads only one line from the file.

21. What is the logging module in Python used for?
It’s used to track events in programs, record error messages, and debug information in a consistent way.

22. What is the os module in Python used for in file handling?
The os module allows interaction with the operating system — e.g., creating, deleting, and navigating files and directories.

23. What are the challenges associated with memory management in Python?
Circular references between objects.

Large data structures consuming excessive memory.

Memory fragmentation.

24. How do you raise an exception manually in Python?
Use the raise keyword:
raise ValueError("Invalid input")

25. Why is it important to use multithreading in certain applications?
Multithreading is useful for:

Performing multiple I/O-bound tasks concurrently.

Improving program responsiveness.

Running background tasks without blocking the main program.

1.How can you open a file for writing in Python and write a string to it?
with open("file.txt", "w") as f:
    f.write("Hello, World!")

2. Write a Python program to read the contents of a file and print each line.
with open("file.txt", "r") as f:
    for line in f:
        print(line.strip())

3. How would you handle a case where the file doesn’t exist while trying to open it for reading?
try:
    with open("file.txt", "r") as f:
        print(f.read())
except FileNotFoundError:
    print("File does not exist.")

4. Write a Python script that reads from one file and writes its content to another file.
with open("source.txt", "r") as src, open("destination.txt", "w") as dest:
    dest.write(src.read())

5. How would you catch and handle division by zero error in Python?
try:
    result = 10 / 0
except ZeroDivisionError:
    print("Cannot divide by zero.")

6. Write a Python program that logs an error message to a log file when a division by zero exception occurs.
import logging
logging.basicConfig(filename="error.log", level=logging.ERROR)

try:
    10 / 0
except ZeroDivisionError:
    logging.error("Division by zero occurred")

7. How do you log information at different levels (INFO, ERROR, WARNING) in Python using the logging module?
import logging
logging.basicConfig(level=logging.DEBUG)

logging.info("Info message")
logging.warning("Warning message")
logging.error("Error message")

8. Write a program to handle a file opening error using exception handling.
try:
    with open("nonexistent.txt", "r") as f:
        print(f.read())
except FileNotFoundError:
    print("File not found.")

9. How can you read a file line by line and store its content in a list in Python?
with open("file.txt", "r") as f:
    lines = [line.strip() for line in f]

10. How can you append data to an existing file in Python?
with open("file.txt", "a") as f:
    f.write("\nNew line of text")

11. Write a Python program that uses a try-except block to handle an error when attempting to access a dictionary key that doesn't exist.
data = {"name": "Tisha"}
try:
    print(data["age"])
except KeyError:
    print("Key does not exist.")

12. Write a program that demonstrates using multiple except blocks to handle different types of exceptions.
try:
    num = int("abc")
    result = 10 / num
except ValueError:
    print("Invalid number format.")
except ZeroDivisionError:
    print("Cannot divide by zero.")

13. How would you check if a file exists before attempting to read it in Python?
import os
if os.path.exists("file.txt"):
    with open("file.txt", "r") as f:
        print(f.read())

14. Write a program that uses the logging module to log both informational and error messages.
import logging
logging.basicConfig(level=logging.INFO)

logging.info("Program started.")
try:
    10 / 0
except ZeroDivisionError:
    logging.error("Error occurred: Division by zero.")

15. Write a Python program that prints the content of a file and handles the case when the file is empty.
with open("file.txt", "r") as f:
    content = f.read()
    if content:
        print(content)
    else:
        print("File is empty.")

16. Demonstrate how to use memory profiling to check the memory usage of a small program.
import psutil
import os

process = psutil.Process(os.getpid())

def my_function():
    data = [i for i in range(1_000_000)]
    total = sum(data)
    print("Sum is:", total)
    print("Memory usage:", process.memory_info().rss / 1024 ** 2, "MB")

my_function()

17. Write a Python program to create and write a list of numbers to a file, one number per line.
numbers = [1, 2, 3, 4, 5]
with open("numbers.txt", "w") as f:
    for num in numbers:
        f.write(f"{num}\n")

18. How would you implement a basic logging setup that logs to a file with rotation after 1MB?
import logging
from logging.handlers import RotatingFileHandler

handler = RotatingFileHandler("app.log", maxBytes=1_000_000, backupCount=3)
logging.basicConfig(handlers=[handler], level=logging.INFO)

19. Write a program that handles both IndexError and KeyError using a try-except block.
data = {"name": "Tisha"}
lst = [1, 2, 3]

try:
    print(lst[5])
    print(data["age"])
except IndexError:
    print("List index out of range.")
except KeyError:
    print("Key not found.")

20. How would you open a file and read its contents using a context manager in Python?
with open("file.txt", "r") as f:
    print(f.read())

21. Write a Python program that reads a file and prints the number of occurrences of a specific word.
word = "Python"
with open("file.txt", "r") as f:
    content = f.read()
count = content.count(word)
print(f"'{word}' occurs {count} times.")

22. How can you check if a file is empty before attempting to read its contents?
import os
if os.path.getsize("file.txt") == 0:
    print("File is empty.")

23. Write a Python program that writes to a log file when an error occurs during file handling.
import logging
logging.basicConfig(filename="error.log", level=logging.ERROR)

try:
    with open("no_file.txt", "r") as f:
        print(f.read())
except FileNotFoundError as e:
    logging.error(f"Error: {e}")